AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Deploy 'DexWallet.Identity' service to ECS cluster in Fargate mode.

Parameters:
  
  ECSServiceSecurityGroup:
    Description: Choose which security group this service should be configured.
    Type: List<String>

  ELBListenerArn:
    Description: The ARN of ELB listener.
    Type: String
  
  ClusterName:
    Description: Please provide the ECS Cluster ID that this service should run on. (Ex. Foo)
    Type: String
    Default: "DexWallet"
  
  ServiceName:
    Description: Please provide the service name to create. (Ex. Foo.Bar)
    Type: String
    Default: "DexWallet-Identity"
  
  ServicePathPattern:
    Description: Please provide the service path pattern (Ex. /bar/*).
    Type: String
    Default: /identity/*
  
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1
  
  ImageUrl:
    Description: The Image url from ECR.
    Type: String
    Default: "320876829357.dkr.ecr.ap-south-1.amazonaws.com/dex-wallet_identity:latest"
  
  VPCId:
    Description: Choose which VPC this ECS cluster should be deployed to.
    Type: AWS::EC2::VPC::Id
    Default: "vpc-0d8bfb69a99ffed9b" # Default VPC instance
  
  Subnets:
    Description: Choose in which subnets this ELB and cluster should be created.
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-0cb961848b18d4519, subnet-0b31d29b25557b506, subnet-0fb3a855161e48a1a" # Default VPC subnets
  
  ELBListenerRulePriority:
    Description: Rule Priority
    Type: Number
    Default: 2

Resources:
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      RequiresCompatibilities: [ "FARGATE" ]
      NetworkMode: "awsvpc"
      Memory: 512
      Cpu: 256
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Image: !Ref ImageUrl
          MemoryReservation: 512
          Cpu: 256
          Environment:
            - Name: "ASPNETCORE_ENVIRONMENT"
              Value: "Production"
            - Name: "AppSettings:SigningKey"
              Value: "298C45B3-0431-438E-B246-70EC6932A984"
            - Name: "AppSettings:RefreshTokenTTL"
              Value: 2
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
  
  
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: "FARGATE"
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Ref ServiceName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Ref ECSServiceSecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
  
  
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365
  
  
  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId
  
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [ !Ref ServicePathPattern ]
      ListenerArn: !Ref ELBListenerArn
      Priority: !Ref ELBListenerRulePriority
  
  
  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ServiceName}-ECSTaskExecutionRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": { 
                    "Service": "ecs-tasks.amazonaws.com" 
                }
            }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "ecr:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "SecondStatement",
                  "Effect": "Allow",
                  "Action": "cloudwatch:*",
                  "Resource": "*"
                },
                {
                  "Sid": "DynamodbFullAccessStatement",
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": "*"
                }
              ]
            }
  
  
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSTaskExecutionRole
